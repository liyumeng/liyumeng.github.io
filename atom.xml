<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yumeng Li's Blog]]></title>
  <link href="http://liyumeng.github.io/atom.xml" rel="self"/>
  <link href="http://liyumeng.github.io/"/>
  <updated>2015-03-27T02:15:03+00:00</updated>
  <id>http://liyumeng.github.io/</id>
  <author>
    <name><![CDATA[Yumeng Li]]></name>
    <email><![CDATA[lym199286@live.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Leetcode] Trapping Rain Water - 递减栈]]></title>
    <link href="http://liyumeng.github.io/blog/2015/03/27/leetcode-trapping-rain-water/"/>
    <updated>2015-03-27T01:12:24+00:00</updated>
    <id>http://liyumeng.github.io/blog/2015/03/27/leetcode-trapping-rain-water</id>
    <content type="html"><![CDATA[<h3>题目：Trapping Rain Water <a href="https://leetcode.com/problems/trapping-rain-water/">点击查看</a></h3>

<p><strong>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.
For example,
Given <code>[0,1,0,2,1,0,1,3,2,1,2,1]</code>, return <code>6</code>.</strong></p>

<p><img src="http://www.leetcode.com/wp-content/uploads/2012/08/rainwatertrap.png" alt="" /></p>

<p>The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!</p>

<hr />

<h3>解题思路：</h3>

<p>时刻维护一个递减的栈。</p>

<ol>
<li>当前元素比栈顶元素小时，直接进栈；</li>
<li><p>当前元素大于等于栈顶元素时，弹出栈顶元素，由弹出后新的栈顶元素与当前元素构成一个凹槽，但凹槽并不一定是见底的。比如4、2、3,其中的4和3形成一个凹槽,但因为中间有个2，所以只能容纳1个单位的水。这也就是min(A[k],A[i])-t的原因，t就是这个2，A[k]=4,A[i]=3。</p></li>
<li><p>将每次出栈产生的结果加到一起就行了。</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Solution {
</span><span class='line'>public:
</span><span class='line'>    int trap(int A[], int n) {
</span><span class='line'>        int top=0;
</span><span class='line'>        if(n&lt;3) return 0;
</span><span class='line'>        s[top++]=0;
</span><span class='line'>        int res=0,t=0,pre=0;
</span><span class='line'>        for(int i=1;i&lt;n;i++)
</span><span class='line'>        {
</span><span class='line'>            while(top&gt;0&&A[i]&gt;=A[s[top-1]])
</span><span class='line'>            {
</span><span class='line'>                t=A[s[--top]];//栈顶元素，能进到这层循环里，说明A[i]比栈顶元素要大
</span><span class='line'>                if(top&gt;0)//弹出刚刚的栈顶元素后,那这次栈顶的元素一定比刚刚弹出的那个大
</span><span class='line'>                {
</span><span class='line'>                    pre=s[top-1];//新的栈顶元素
</span><span class='line'>                    res+=(i-pre-1)*(min(A[k],A[i])-t);//这样新栈顶元素与A[i]这间就形成了一个凹槽
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>            s[top++]=i;
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        return res;
</span><span class='line'>    }
</span><span class='line'>private:
</span><span class='line'>    int s[100000];
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在这儿的第一篇博文]]></title>
    <link href="http://liyumeng.github.io/blog/2015/03/26/zai-zhe-er-de-di-yi-pian-bo-wen/"/>
    <updated>2015-03-26T17:22:56+00:00</updated>
    <id>http://liyumeng.github.io/blog/2015/03/26/zai-zhe-er-de-di-yi-pian-bo-wen</id>
    <content type="html"><![CDATA[<p>最近比较闲，便抽出一部分时间在github上搭建了这个博客。
应该是很早之前就有这个想法了，因为各种原因一拖再拖。今天终于可以为此庆贺一下了。
好久不写这类文字了，竟不知道写什么了，今天在此Mark一下吧，以后争取经常更新。</p>
]]></content>
  </entry>
  
</feed>
